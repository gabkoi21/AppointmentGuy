‚úÖ Example Palette:
Primary: Teal (#14B8A6)

Background: Light Gray (#F3F4F6)

Text: Dark Gray (#374151)

CTA Buttons: Indigo or Green

Accent: Soft Blue or Yellow


<div className="flex items-center bg-gray-200 text-black rounded-lg p-1 gap-2">
          {tabsStatus.map((tab) => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`px-4 py-1 rounded border transition ${
                activeTab === tab
                  ? "border-gray-100 bg-gray-100 text-black font-medium"
                  : "border-transparent hover:border-gray-400"
              }`}
            >
              {tab}
            </button>






const ActiveStatusNavigation = ({ activeTab, setActiveTab }) => {
  const tabs = ["All Business", "Pending Approved", "Active", "Suspend"];

  return (
    <div className="flex items-center bg-gray-100 text-black rounded-lg py-1 px-2 gap-2">
      {tabs.map((tab) => (
        <button
          key={tab}
          onClick={() => setActiveTab(tab)}
          className={`px-4 py-1 rounded font-medium transition duration-200 ${
            activeTab === tab
              ? "bg-white text-black"
              : "bg-transparent text-gray-600"
          }`}
        >
          {tab}
        </button>
      ))}
    </div>
  );
};

export default ActiveStatusNavigation;




const DashboardCards = () => {
  const stats = [
    {
      title: "Total Appointments",
      count: "1,245",
      icon: mdiCalendarMonth,
      color: "bg-blue-600",
    },
    {
      title: "Confirmed Appointments",
      count: "968",
      icon: mdiCheckCircleOutline,
      color: "bg-green-500",
    },
    {
      title: "Cancelled Appointments",
      count: "62",
      icon: mdiCancel,
      color: "bg-red-500",
    },
    {
      title: "Total Users",
      count: "378",
      icon: mdiAccount,
      color: "bg-purple-600",
    },
  ];

  return (
    <div className="w-full px-4 py-6">
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((item, index) => (
          <div
            key={index}
            className="bg-white rounded-2xl shadow-md p-5 flex items-center gap-5"
          >
            <div
              className={`w-12 h-12 shrink-0 flex items-center justify-center text-white rounded-full ${item.color}`}
            >
              <Icon path={item.icon} size={1} />
            </div>
            <div className="flex flex-col">
              <div className="text-xl font-bold">{item.count}</div>
              <div className="text-gray-500 text-sm leading-tight">
                {item.title}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};





const Appointments = () => {
  const [tab, setTab] = useState("Upcoming");

  const appointments = [
    {
      name: "John Smith",
      service: "Haircut",
      time: "Today, 10:00 AM",
      status: "Confirmed",
    },
    {
      name: "Sarah Johnson",
      service: "Hair Coloring",
      time: "Today, 11:30 AM",
      status: "Confirmed",
    },
    {
      name: "Michael Brown",
      service: "Beard Trim",
      time: "Today, 1:00 PM",
      status: "Pending",
    },
    {
      name: "Emily Davis",
      service: "Manicure",
      time: "Today, 2:30 PM",
      status: "Confirmed",
    },
    {
      name: "Robert Wilson",
      service: "Facial",
      time: "Today, 4:00 PM",
      status: "Pending",
    },
  ];

  return (
    <div className="p-6 w-[97%] mx-auto border mb-10 rounded-md">
      <h2 className="text-2xl font-semibold mb-1">Recent Appointments</h2>
      <p className="text-sm text-gray-500 mb-4">
        Manage your upcoming and recent appointments
      </p>

      <div className="flex space-x-2 mb-6">
        {["Upcoming", "Recent"].map((label) => (
          <button
            key={label}
            onClick={() => setTab(label)}
            className={`px-4 py-1 rounded-md text-sm font-medium ${
              tab === label
                ? "bg-black text-white"
                : "bg-gray-100 text-gray-700"
            }`}
          >
            {label}
          </button>
        ))}
      </div>

      <div className="space-y-4">
        {appointments.map((item, idx) => (
          <AppointmentCard key={idx} {...item} />
        ))}
      </div>

      <div className="text-center mt-6 border py-2 rounded ">
        <button className="text-sm font-semibold text-black hover:underline">
          View all appointments
        </button>
        <span className="ml-2">‚Üó</span>
      </div>
    </div>
  );
};
















// This is the is Authentication 



import { create } from "zustand";
import { persist } from "zustand/middleware";

// Fake Admin, User & Driver Data
const FAKE_Admin = {
  name: "Jack",
  email: "Admin",
  password: "Admin",
  role: "admin",
};

const FAKE_USER = {
  name: "John",
  email: "User",
  password: "User",
  role: "user",
};

const FAKE_DRIVER = {
  name: "Mary",
  email: "Driver",
  password: "Driver",
  role: "driver",
};

// Create Zustand Store
const useAuthStore = create(
  persist(
    (set) => ({
      user: null,
      isAuthenticated: false,

      // Login function
      login: (email, password) => {
        let loggedInUser = null;

        if (email === FAKE_Admin.email && password === FAKE_Admin.password) {
          loggedInUser = FAKE_Admin;
        } else if (
          email === FAKE_USER.email &&
          password === FAKE_USER.password
        ) {
          loggedInUser = FAKE_USER;
        } else if (
          email === FAKE_DRIVER.email &&
          password === FAKE_DRIVER.password
        ) {
          loggedInUser = FAKE_DRIVER;
        }

        if (loggedInUser) {
          set({ user: loggedInUser, isAuthenticated: true });
          return true;
        }

        return false;
      },

      // Logout function
      logout: () => set({ user: null, isAuthenticated: false }),
    }),
    { name: "auth-storage" }
  )
);

export default useAuthStore;




const RowUpdate = () => {
  return (
    <div className="absolute right-10 mt-2 w-64 bg-white rounded-xl shadow-xl z-10 border border-gray-200">
      <div className="px-4 py-3 border-b border-gray-200">
        <p className="text-sm font-semibold text-gray-600">
          Manage Appointment
        </p>
        <p className="text-xs text-gray-400 mt-1">
          Choose an action to update this booking.
        </p>
      </div>

      <div className="flex flex-col text-sm">
        <button
          className="px-4 py-2 text-gray-700 hover:bg-gray-100 w-full text-left"
          title="Change the date or time of this appointment"
        >
          üìÖ Reschedule
        </button>
        <button
          className="px-4 py-2 text-gray-700 hover:bg-gray-100 w-full text-left"
          title="Mark this appointment as completed, confirmed, or pending"
        >
          üîÑ Update Status
        </button>
        <button
          className="px-4 py-2 text-red-600 hover:bg-red-50 w-full text-left"
          title="Permanently cancel this appointment"
        >
          ‚ùå Cancel Appointment
        </button>
      </div>
    </div>
  );
};





// This is  a code snippe 



const AppointmentAction = () => {
  return (
    <div className="flex items-center gap-4">
      {/* Edit Button */}
      <button className="flex items-center gap-1 text-blue-500 hover:text-blue-700">
        <Icon path={mdiSquareEditOutline} size={0.8} />
      </button>
      {/* Suspend/Activate Button */}
      {status === "Active" ? (
        <button className="text-gray-600 hover:text-yellow-600 p-1">
          <Icon path={mdiAccountOff} size={0.8} />
        </button>
      ) : (
        <button
          className="text-gray-600 hover:text-green-600 p-1"
          onClick={() => {
            console.log("Activate clicked for", id);
          }}
        >
          <Icon path={mdiAccountCheck} size={0.8} />
        </button>
      )}
      {/* Delete Button */}
      <button className="flex items-center gap-1 text-red-500 hover:text-red-700">
        <Icon path={mdiTrashCanOutline} size={0.8} />
      </button>
    </div>
  );
};















import { useEffect, useRef } from "react";

import {
  mdiPencilOutline,
  mdiTrashCanOutline,
  mdiDotsVertical,
  mdiCalendarEditOutline,
  mdiPlayCircleOutline,
  mdiEyeOutline,
} from "@mdi/js";

import Icon from "@mdi/react";

const statusColor = {
  Scheduled: "bg-blue-100 text-blue-700",
  Completed: "bg-green-100 text-green-700",
  Canceled: "bg-red-100 text-red-700",
};

const AppointmentRow = ({
  appointment,
  services,
  activeActionId,
  setActiveActionId,
}) => {
  const actionRef = useRef(null);

  const {
    user: { first_name = "", last_name = "" } = {},
    status,
    scheduled_time,
    service_id,
    id,
  } = appointment;

  const serviceName =
    services.find((s) => s.id === service_id)?.name || "Unknown Service";
  const fullName = `${first_name} ${last_name}`.trim() || "No Name";

  const isActionOpen = activeActionId === id;

  const handleActionClick = (e) => {
    e.stopPropagation();
    setActiveActionId(isActionOpen ? null : id);
  };

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (actionRef.current && !actionRef.current.contains(event.target)) {
        if (activeActionId === id) {
          setActiveActionId(null);
        }
      }
    };

    if (isActionOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isActionOpen, activeActionId, id, setActiveActionId]);

  return (
    <tr className="border-b hover:bg-gray-50 dark:hover:bg-gray-700">
      <td className="px-4 py-4 font-medium text-gray-900 dark:text-white">
        {fullName}
      </td>
      <td className="px-3 py-4 capitalize">{serviceName}</td>
      <td className="px-3 py-4">{scheduled_time}</td>
      <td className="px-3 py-4">
        <span
          className={`px-2 py-1 rounded-full text-xs font-semibold ${
            statusColor[status] || "bg-gray-200 text-gray-700"
          }`}
        >
          {status || "Unknown"}
        </span>
      </td>
      <td className="relative px-3 py-4" ref={actionRef}>
        <button
          onClick={handleActionClick}
          className="p-1 hover:bg-gray-100 rounded transition-colors duration-200"
        >
          <Icon path={mdiDotsVertical} size={1} />
        </button>
        {isActionOpen && (
          <ActionAppointment
            appointmentId={id}
            onClose={() => setActiveActionId(null)}
          />
        )}
      </td>
    </tr>
  );
};

// Move this ABOVE AppointmentRow

const ActionAppointment = ({ appointmentId, onClose }) => {
  const actions = [
    {
      label: "Edit",
      icon: mdiPencilOutline,
      color: "text-blue-600",
      hoverColor: "hover:text-blue-800",
    },
    {
      label: "Delete",
      icon: mdiTrashCanOutline,
      color: "text-red-600",
      hoverColor: "hover:text-red-800",
    },
    {
      label: "Activate",
      icon: mdiPlayCircleOutline,
      color: "text-green-600",
      hoverColor: "hover:text-green-800",
    },
    // Adding a couple more common actions for completeness
    {
      label: "View Details",
      icon: mdiEyeOutline,
      color: "text-gray-600",
      hoverColor: "hover:text-gray-800",
    },
    {
      label: "Reschedule",
      icon: mdiCalendarEditOutline,
      color: "text-purple-600",
      hoverColor: "hover:text-purple-800",
    },
  ];

  const handleActionClick = (actionLabel, e) => {
    e.stopPropagation();
    console.log(`${actionLabel} clicked for appointment ${appointmentId}`);
    onClose();
  };

  return (
    <div className="absolute right-0 mt-2 bg-white shadow-lg rounded-md py-2 px-3 z-10 w-40 border border-gray-200">
      <div className="flex flex-col gap-2 text-sm font-medium">
        {actions.map(({ label, icon, color, hoverColor }) => (
          <button
            key={label}
            onClick={(e) => handleActionClick(label, e)}
            className={`
              flex items-center gap-2 cursor-pointer 
              transition-colors duration-200 text-left w-full 
              p-2 rounded-md
              ${color} 
              ${hoverColor} 
              hover:bg-gray-100
            `}
          >
            <Icon path={icon} size={0.8} />
            <span className="capitalize">{label}</span>
          </button>
        ))}
      </div>
    </div>
  );
};

export default AppointmentRow;



import React, { useState } from "react";
import Icon from "@mdi/react";
import { mdiViewDashboard } from "@mdi/js";
// import AdminHeaderNav from "../components/Customers/AdminHeaderNav";
import AdminHeaderNav from "@/components/Global/AdminHeaderNav";
import { NAV_ITEMS } from "../components/Admin/AdminRoutes/NavItems";
import SidebarNavLink from "../components/Admin/AdminRoutes/SidebarNavLink";
import SidebarBusinessDropdown from "../components/Admin/AdminRoutes/BusinessSideBarNavDropdown";
import SidebarNavDropdown from "../components/Admin/AdminRoutes/SidebarSubMenu.jsx";
import { Link } from "react-router";

export const AdminNav = () => {
  const [showBusinessDropdown, setShowBusinessDropdown] = useState(false);

  return (
    <header>
      <AdminHeaderNav />
      {/* Main Navigation Sidebar */}
      <nav className="fixed top-0 left-0 right-2 h-full w-[20%] bg-gray-100 overflow-y-auto z-10">
        <div className="pt-2 ml-4 mb-5">
          <Link className="flex items-center gap-3 mt-2" to={"Admindashboard"}>
            <Icon path={mdiViewDashboard} size={1} className="text-gray-700" />
            <h3 className="text-2xl font-semibold text-gray-800">
              AppointmentGuy
            </h3>
          </Link>
        </div>
        <hr className=" -mt-1 mb-3 border-t border-gray-300" />
        {/* Navigation Links */}

        <div className="block w-full px-3">
          <ul className="list-style-none me-auto flex flex-col ps-0 lg:mt-1 font-roboto whitespace-nowrap">
            {NAV_ITEMS.map((item) => (
              <li key={item.to} className="mb-4 ps-2 lg:mb-8 lg:pe-1 lg:ps-0">
                {item.subItems ? (
                  <>
                    <div>
                      {/* Render SidebarNavDropdown for items with subItems */}
                      <SidebarNavDropdown
                        item={item}
                        onClick={() =>
                          setShowBusinessDropdown(!showBusinessDropdown)
                        }
                      />
                    </div>
                    {/* Render dropdown items if the parent item has subItems */}
                    {showBusinessDropdown && (
                      <SidebarBusinessDropdown
                        parentTo={item.to}
                        subItems={item.subItems}
                      />
                    )}
                  </>
                ) : (
                  // Render regular NavLink for non-dropdown items
                  <SidebarNavLink
                    to={item.to}
                    icon={item.icon}
                    label={item.label}
                    ariaLabel={item.ariaLabel}
                  />
                )}
              </li>
            ))}
          </ul>
        </div>
      </nav>
    </header>
  );
};
