✅ Example Palette:
Primary: Teal (#14B8A6)

Background: Light Gray (#F3F4F6)

Text: Dark Gray (#374151)

CTA Buttons: Indigo or Green

Accent: Soft Blue or Yellow


<div className="flex items-center bg-gray-200 text-black rounded-lg p-1 gap-2">
          {tabsStatus.map((tab) => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`px-4 py-1 rounded border transition ${
                activeTab === tab
                  ? "border-gray-100 bg-gray-100 text-black font-medium"
                  : "border-transparent hover:border-gray-400"
              }`}
            >
              {tab}
            </button>






const ActiveStatusNavigation = ({ activeTab, setActiveTab }) => {
  const tabs = ["All Business", "Pending Approved", "Active", "Suspend"];

  return (
    <div className="flex items-center bg-gray-100 text-black rounded-lg py-1 px-2 gap-2">
      {tabs.map((tab) => (
        <button
          key={tab}
          onClick={() => setActiveTab(tab)}
          className={`px-4 py-1 rounded font-medium transition duration-200 ${
            activeTab === tab
              ? "bg-white text-black"
              : "bg-transparent text-gray-600"
          }`}
        >
          {tab}
        </button>
      ))}
    </div>
  );
};

export default ActiveStatusNavigation;




const DashboardCards = () => {
  const stats = [
    {
      title: "Total Appointments",
      count: "1,245",
      icon: mdiCalendarMonth,
      color: "bg-blue-600",
    },
    {
      title: "Confirmed Appointments",
      count: "968",
      icon: mdiCheckCircleOutline,
      color: "bg-green-500",
    },
    {
      title: "Cancelled Appointments",
      count: "62",
      icon: mdiCancel,
      color: "bg-red-500",
    },
    {
      title: "Total Users",
      count: "378",
      icon: mdiAccount,
      color: "bg-purple-600",
    },
  ];

  return (
    <div className="w-full px-4 py-6">
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((item, index) => (
          <div
            key={index}
            className="bg-white rounded-2xl shadow-md p-5 flex items-center gap-5"
          >
            <div
              className={`w-12 h-12 shrink-0 flex items-center justify-center text-white rounded-full ${item.color}`}
            >
              <Icon path={item.icon} size={1} />
            </div>
            <div className="flex flex-col">
              <div className="text-xl font-bold">{item.count}</div>
              <div className="text-gray-500 text-sm leading-tight">
                {item.title}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};





const Appointments = () => {
  const [tab, setTab] = useState("Upcoming");

  const appointments = [
    {
      name: "John Smith",
      service: "Haircut",
      time: "Today, 10:00 AM",
      status: "Confirmed",
    },
    {
      name: "Sarah Johnson",
      service: "Hair Coloring",
      time: "Today, 11:30 AM",
      status: "Confirmed",
    },
    {
      name: "Michael Brown",
      service: "Beard Trim",
      time: "Today, 1:00 PM",
      status: "Pending",
    },
    {
      name: "Emily Davis",
      service: "Manicure",
      time: "Today, 2:30 PM",
      status: "Confirmed",
    },
    {
      name: "Robert Wilson",
      service: "Facial",
      time: "Today, 4:00 PM",
      status: "Pending",
    },
  ];

  return (
    <div className="p-6 w-[97%] mx-auto border mb-10 rounded-md">
      <h2 className="text-2xl font-semibold mb-1">Recent Appointments</h2>
      <p className="text-sm text-gray-500 mb-4">
        Manage your upcoming and recent appointments
      </p>

      <div className="flex space-x-2 mb-6">
        {["Upcoming", "Recent"].map((label) => (
          <button
            key={label}
            onClick={() => setTab(label)}
            className={`px-4 py-1 rounded-md text-sm font-medium ${
              tab === label
                ? "bg-black text-white"
                : "bg-gray-100 text-gray-700"
            }`}
          >
            {label}
          </button>
        ))}
      </div>

      <div className="space-y-4">
        {appointments.map((item, idx) => (
          <AppointmentCard key={idx} {...item} />
        ))}
      </div>

      <div className="text-center mt-6 border py-2 rounded ">
        <button className="text-sm font-semibold text-black hover:underline">
          View all appointments
        </button>
        <span className="ml-2">↗</span>
      </div>
    </div>
  );
};
















// This is the is Authentication 



import { create } from "zustand";
import { persist } from "zustand/middleware";

// Fake Admin, User & Driver Data
const FAKE_Admin = {
  name: "Jack",
  email: "Admin",
  password: "Admin",
  role: "admin",
};

const FAKE_USER = {
  name: "John",
  email: "User",
  password: "User",
  role: "user",
};

const FAKE_DRIVER = {
  name: "Mary",
  email: "Driver",
  password: "Driver",
  role: "driver",
};

// Create Zustand Store
const useAuthStore = create(
  persist(
    (set) => ({
      user: null,
      isAuthenticated: false,

      // Login function
      login: (email, password) => {
        let loggedInUser = null;

        if (email === FAKE_Admin.email && password === FAKE_Admin.password) {
          loggedInUser = FAKE_Admin;
        } else if (
          email === FAKE_USER.email &&
          password === FAKE_USER.password
        ) {
          loggedInUser = FAKE_USER;
        } else if (
          email === FAKE_DRIVER.email &&
          password === FAKE_DRIVER.password
        ) {
          loggedInUser = FAKE_DRIVER;
        }

        if (loggedInUser) {
          set({ user: loggedInUser, isAuthenticated: true });
          return true;
        }

        return false;
      },

      // Logout function
      logout: () => set({ user: null, isAuthenticated: false }),
    }),
    { name: "auth-storage" }
  )
);

export default useAuthStore;
